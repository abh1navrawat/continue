You are given an integer array nums. You want to maximize the number of points you get by performing the following operation any number of times:

Pick any nums[i] and delete it to earn nums[i] points. Afterwards, you must delete every element equal to nums[i] - 1 and every element equal to nums[i] + 1.
Return the maximum number of points you can earn by applying the above operation some number of times.




intuition - Simplifying it to house robber problem. We have to get the maximum points. SO make a variable and storeall the copies of distinct integers in input array, then f[i] will store all the copies of 
            corresponding no. in input array. then it will automatically become house robber problem.





class Solution:
    def deleteAndEarn(self, nums: List[int]) -> int:
        f=[0]*(max(nums)+1)
        for n in nums:
            f[n]+=n
        c,p=0,0
        for i in f:
            c,p=max(p+i,c),c
        return c






solution 2 :


intuition - Creating an array that will contain overall sun of all the numbers.  (nums=[2,2,2,4,6,6]    arr=[6,4,12])
            arr will also contain zero in places where missing nums.             (in above example 0,1,3,5 is missing in their place zeroes will be added in arr)
            Then just check which is bigger previous ele of dp or sum of 2nd last and curr arr ele.
            place that in dp and return the last(biggest) ele of dp.






class Solution:
    def deleteAndEarn(self, nums: List[int]) -> int:
        nums.sort()
        arr=[0]*(nums[-1]+1)
        for i in nums:
            arr[i]+=i
        dp=arr
        for i in range(2,len(arr)):
            dp[i]= max(arr[i]+dp[i-2],dp[i-1])
        return dp[-1]
