Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.




Intuition - Create 2 lists with length of nums. Create 2 variable prefix and postfix whose value will be 1(because if we pust it zero,and then multiply it with
            any number it will return zero). Create a for loop for i in range length of nums. list1 elements will bbe equal to prefix.but prefix will be 
            multiplied with ith nums in every iteration. (it will generate a list that multiply every element that is in left of i).
            Do a loop for j ,use the other variable this time(it will generate a list that multily every element that is right of i).
            create a result array, insert the multiplied values if both the list and return result





class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        list1=[1]*(len(nums))
        list2=[1]*(len(nums))
        post,pre=1,1
        for i in range(len(nums)):
            list1[i]=pre
            pre*=nums[i]
        for j in range(len(nums)-1,-1,-1):
            list2[j]=post
            post*=nums[j]
        res=[]
        for k in range(len(nums)):
            res.append(list1[k]*list2[k])
        return res
