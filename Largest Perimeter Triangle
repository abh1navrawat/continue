Given an integer array nums, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. If it is impossible to form any triangle of a non-zero area, return 0.





intuition - We have to find the largest perimeter so sort the list in decending order. Then start iterating and check if it matches triangle inequality theorem(sum if 2 side should be greater than the 
            third side). If it follows the triangle inequality theorem then return the sum of them(sum only takes 2 arguments normally but if you use square bracket inside then it will take them all).
            If nothing matches return zero




Runtime -157ms (beats 98.92%)

class Solution:
    def largestPerimeter(self,s: List[int]) -> int:
        s.sort(reverse=True)
        for i in range(3,len(s)+1):
            if (s[i-3]<s[i-2]+s[i-1]):
                return sum([s[i-3],s[i-2],s[i-1]])
        return 0
