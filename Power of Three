Given an integer n, return true if it is a power of three. Otherwise, return false.

An integer n is a power of three, if there exists an integer x such that n == 3x.




intuition - Couldn't solve it without recursion.The only method found without recusion was to directly take 2^19(thats the maximum range). If the given number is power of 3 then it will divided by three
            It will continously be divided by three until it reach 1. If it reach 1 then return True, or if didn't gave remainder 0 during a single step it will return 0





class Solution:
    def isPowerOfThree(self, n: int) -> bool:
        if n == 1:
            return True
        elif n == 0:
            return False
        else:
            return n % 3 == 0 and self.isPowerOfThree(n // 3)
