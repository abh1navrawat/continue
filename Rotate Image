You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.



ex -                                                                                                                matrix = [[1,2,3],[4,5,6],[7,8,9]]
intuition - Could not do without nested loop. IN first loop we are reversing the matrix                             matrix = [[7, 8, 9], [4, 5, 6], [1, 2, 3]]
                                              In second loop we are returning transpose of the reversed matrix      matrix = [[7,4,1],[8,5,2],[9,6,3]]





class Solution:
    def rotate(self, m: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        z=0
        l=len(m)-1
        while z<l:
            m[z],m[l]=m[l],m[z]
            z+=1
            l-=1
        for i in range(len(m)):
            for j in range(i):
                m[i][j],m[j][i]=m[j][i],m[i][j]







on second try use this approach,
rub a loop first interchange the first element with 1st row last ele,         [left to right]
            then interchange the new first element to last row last ele,      [top to bottom]
            then interchange the new first element to last row first ele.     [bottom to top]



Add a coloumn at first full of zeroes( will help in easy interchange of elements. Nested arrays have a different insert syntax 
arrayname[listposition].insert(index,elements)
list5[0].insert(0, (2,5,6,8))
