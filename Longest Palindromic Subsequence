Given a string s, find the longest palindromic subsequence's length in s.

A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.






intuition - Create a 2d array which will contain total len(s)+1 square sub elements. Concept is simple if we found a match of forward and backward element we will increment the value of longest palindromic 
            subsequence by 1. If not we will still store the largest value of longest palindromic subsequence in dp[i][j].  







 class Solution:
    def longestPalindromeSubseq(self, s: str) -> int:
        dp=[[0 for _ in range(len(s)+1)]for __ in range(len(s)+1)]
        for i in range(1,len(s)+1):
            for j in range(1,len(s)+1):
                if s[i-1]!=s[-j]:
                    dp[i][j]=max(dp[i][j-1],dp[i-1][j])
                else:
                    dp[i][j]=1+dp[i-1][j-1]
        print(dp)
        return dp[-1][-1]
