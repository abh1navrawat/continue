You are given a 0-indexed integer array nums of size 3 which can form the sides of a triangle.

A triangle is called equilateral if it has all sides of equal length.
A triangle is called isosceles if it has exactly two sides of equal length.
A triangle is called scalene if all its sides are of different lengths.
Return a string representing the type of triangle that can be formed or "none" if it cannot form a triangle.





intuition - Very bad runtime but great memory(beat 94.65%). First check the proprety of triangle that states that sum of 2 sides should be greater than the thrid side. If thats true check the nested ifs statements
            make it a set so it will remove duplicate items. So different length will tell different type of triangle.
            Alternatively, we can also solve it through by first sorting it in ascending order then only checking (nums[0]+nums[1])>nums[2] it will improve runtime but will increase memory consumption.





class Solution:
    def triangleType(self, nums: List[int]) -> str:
        if (nums[0]+nums[1])>nums[2] and (nums[0]+nums[2])>nums[1] and (nums[2]+nums[1])>nums[0]:
            nums=set(nums)
            if len(nums)==1:
                return 'equilateral'
            elif len(nums)==2:
                return 'isosceles'
            else:
                return 'scalene'
        return 'none'
