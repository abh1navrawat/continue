A self-dividing number is a number that is divisible by every digit it contains.

For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.
A self-dividing number is not allowed to contain the digit zero.

Given two integers left and right, return a list of all the self-dividing numbers in the range [left, right].





intuition - nested loop solution. First check whether the given number contain zero in it. if yes, then directly move to next number. Store i in another variable(so we can use i later). Store the remainder
            of j divided by 10 in n(that would be the ones place digit). check whether remainder of i divided by n is 0 if not then maike j=-1(it will make while loop condition false and ca-ome outside the loop)
            Do floor division of j with 10 to go to the next digit. Now if j is not -1 then it is a self dividing number add to the array of self dividing numbers.



class Solution:
	def selfDividingNumbers(self, left: int, right: int) -> List[int]:
		res = []
		for i in range(left, right+ 1):
			if "0" in str(i):
        continue
			j = i
			while j > 0:
				n = j % 10
				if i % n != 0:
					j = -1
				j = j // 10
			if j != -1:
        res.append(i)
		return res
