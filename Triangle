Given a triangle array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.






intuition - Could not do(or find) in time complexity O(n). Just keep adding the smaller element from the previous row to current row.j==1 and j>0 will give True or False means 1 or 0. So j is subtracted 1 or 0
            depending on the situation. In min condition 1st one will (x-1,y) and second one is (x-1,y-1). Atlast return the smallest sub element from the last element of triangle.




class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        for i in range(1,len(triangle)):
            for j in range(i+1):
                triangle[i][j]+=min(triangle[i-1][j-(j==i)],triangle[i-1][j-(j>0)])
        return min(triangle[-1])
