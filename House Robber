You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses
have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.





intuition - At start curr,prev are 0 but later curr represent nums[i-1] element and prev represent nums[i-2] element, n will be the current element. So while assigning curr in loop it will check which one is bigger
            1st and 3rd element or 2nd element. 






class Solution:
    def rob(self, nums: List[int]) -> int:
        curr, prev = 0,0
        for i in nums:
            curr, prev =  max(prev+i, curr), curr
        return curr




solution 2:





class Solution:
    def rob(self, nums: List[int]) -> int:            // if u take n = len(nums) it will be simpler to understand
        s=[nums[0]]
        s.append(max(nums[0],nums[1]))
        for i in range(2,len(nums)):
            s.append(max(s[i-1],nums[i] + s[i-2]))
        return s[-1]
