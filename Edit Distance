Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 




intuition - This problem can be done through the use of usual dynamic programming approach (making a 2d array [len(word2)+1 X len(word1)+1]. Fill first row and first column. Now in iteration if current word1 
            letter is equal to word2 letter, Update the current element of 2d array with the previous row and previous column element. If not equal then ( res[i][j]=1+min(res[i-1][j],res[i][j-1],res[i-1][j-1]) )
            res[i-1][j-1] represent replace, res[i][j-1] represent delete, res[i-1][j] represent insert.





class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        res=[[0]*(len(word2)+1) for _ in range(len(word1)+1)]
        for i in range(len(word1)+1):
            res[i][0]=i
        for j in range(len(word2)+1):
            res[0][j]=j
        for i in range(1,len(word1)+1):
            for j in range(1,len(word2)+1):
                if word1[i-1]==word2[j-1]:
                    res[i][j]=res[i-1][j-1]
                else:
                    res[i][j]=1+min(res[i-1][j],res[i][j-1],res[i-1][j-1])
        return res[-1][-1]
