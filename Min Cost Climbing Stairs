You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.

You can either start from the step with index 0, or the step with index 1.

Return the minimum cost to reach the top of the floor.




intuition - Create an array set its length equal to cost array. If cost contain only 2 elements, so to reach the end we have to take the element which comes later. Now iterate i in range 2 to len of cost.
            Now the ith position of dp will be ith position of cost added with minimum of last element and second last element of dp. IT will add the minimum to the next two values of dp and continuing doing so.
            At last we will return minimum of the last and second last element.

class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        dp=[0]*len(cost)
        dp[0]=cost[0]
        if len(cost)>=2:
            dp[1]=cost[1]
        for i in range(2,len(cost)):
            dp[i]=cost[i]+min(dp[i-1],dp[i-2])
        return min(dp[-1],dp[-2])
