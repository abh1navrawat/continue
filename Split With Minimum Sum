Given a positive integer num, split it into two non-negative integers num1 and num2 such that:

The concatenation of num1 and num2 is a permutation of num.
In other words, the sum of the number of occurrences of each digit in num1 and num2 is equal to the number of occurrences of that digit in num.
num1 and num2 can contain leading zeros.
Return the minimum possible sum of num1 and num2.

Notes:

It is guaranteed that num does not contain any leading zeros.
The order of occurrence of the digits in num1 and num2 may differ from the order of occurrence of num.




intuiton - Created a whole solution by reading the question wrong, I thought num needs to be disintegrate into 2 digit no. every time(Actually need to be created only in 2 numbers). So i soretd num then 
           made a number with 1st digit and last digit(because it will give the smallest number), keep repeating this and adding to sum at last return sum. It even passed 97 testcases(i wasted 2 hrs of my life)
           Actually it can become a medium level question.




class Solution:
    def splitNum(self, num: int) -> int:
        p=sorted(str(num))
        sum,a,i=0,'',0

        if len(p)==1:
            return p

        if len(p)==2:
            return int(p[0])+int(p[-1])
        
        while i<len(p):
            if i>=len(p)//2 and len(p)%2==0:
                break
            elif i>=len(p)//2 and len(p)%2==1:
                a=len(p)//2
                sum+=int(p[a])
                break
            else:
                a=p[i]+p[-i-1]
                sum+=int(a)
                i+=1
        return sum
