You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

The area of an island is the number of cells with a value 1 in the island.

Return the maximum area of an island in grid. If there is no island, return 0.





intuition - solved by using dfs. If we find an island we will run dfs and check its neighbours, if they are also island we will check their neighbours and so on. visited grid element will be replaced by #.
            (if i<0 or j<0 or i>=len(grid) or j>=len(grid[0]) or grid[i][j]!=1) are conditions for out of grid and water.






class Solution:
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
        area=0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]==1:
                    area=max(area,self.dfs(grid,i,j))
        return area
    def dfs(self,grid,i,j):
        if i<0 or j<0 or i>=len(grid) or j>=len(grid[0]) or grid[i][j]!=1:
            return 0
        area=1
        grid[i][j]='#'
        area+=self.dfs(grid,i+1,j)
        area+=self.dfs(grid,i-1,j)
        area+=self.dfs(grid,i,j+1)
        area+=self.dfs(grid,i,j-1)
        return area
