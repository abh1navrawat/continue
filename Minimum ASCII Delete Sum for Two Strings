Given two strings s1 and s2, return the lowest ASCII sum of deleted characters to make two strings equal.





intuition - Basic dynamic programming problem, just visualize making a 2d array and solve it. This problem is similar to the longest common subsequence. Ord will return the ASCII value of the character.
            map is to make each item iterable. Basically, ASCII Sum of S1 - Max ASCII Sum of CS +  ASCII Sum of S2 - Max ASCII Sum of CS





class Solution:
    def minimumDeleteSum(self, s1: str, s2: str) -> int:
        m, n = len(s1), len(s2)
        dp = [[0] * (m + 1) for _ in range(n + 1)]

        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if s1[i - 1] == s2[j - 1]:
                    dp[j][i] = dp[j - 1][i - 1] + ord(s1[i - 1])
                else:
                    dp[j][i] = max(dp[j - 1][i], dp[j][i - 1])
        return sum(map(ord, s1 + s2)) - dp[-1][-1] * 2
