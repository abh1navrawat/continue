Given a string s, return the longest palindromic substring in s.






intuition - For this problem we are going to use Manacher's algorithm. That means we will start from the center and compare the left and right characters, if they are same we increase the max lem and continue
            doing it. The while condition inside for loop will check whether it is palindrome or not, (if i+dp[i] > right) is to update the value of center and right, (if dp[i] > Max_Len) is to update max len
            if the current palindrome is longer than the previous palindrome





class Solution:
    def longestPalindrome(self, s: str) -> str:
        Max_Len=1
        Max_Str=s[0]
        s = '#' + '#'.join(s) + '#'
        dp = [0]*len(s)
        print(dp)
        center = 0
        right = 0
        for i in range(len(s)):
            if i < right:
                dp[i] = min(right-i, dp[2*center-i])
            while i-dp[i]-1 >= 0 and i+dp[i]+1 < len(s) and s[i-dp[i]-1] == s[i+dp[i]+1]:
                dp[i] += 1
            if i+dp[i] > right:
                center = i
                right = i+dp[i]
            if dp[i] > Max_Len:
                Max_Len = dp[i]
                Max_Str = s[i-dp[i]:i+dp[i]+1].replace('#','')
        return Max_Str
